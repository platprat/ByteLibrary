apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: "pmd"

group = "org.jpn.pg.lib"
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '1.0.0'

defaultTasks 'clean', 'publishToMavenLocal'

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava, javadoc]*.options*.encoding = defaultEncoding

// mainJar
task mainJar(type : Jar) {
    from project.sourceSets.main.output
}

// testJar
task testJar(type : Jar) {
    from project.sourceSets.test.output
}

// sourceJar
task sourceJar(type : Jar) {
    from project.sourceSets.main.allSource
}

// zip javadocs
task javadocJar(type : Jar, dependsOn : javadoc) {
    from project.javadoc.destinationDir
}



// publishing description
publishing {
    publications {
        ByteLibrary(MavenPublication) {
            artifactId 'ByteLibrary'
            artifact mainJar

            artifact sourceJar {
                classifier = 'src'
                extension  = 'jar'
            }
            artifact javadocJar {
                classifier = 'javadoc'
                extension  = 'jar'
            }
        }
        ByteLibrary_test(MavenPublication) {
            artifactId 'ByteLibrary_test'
            artifact testJar
        }
    }
}


repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'log4j:log4j:1.2.17'

    testCompile 'junit:junit:3.+'
    testCompile 'org.mockito:mockito-core:2.+'

    testRuntime 'org.slf4j:slf4j-simple:1.7.+'
}


findbugs {
  ignoreFailures = true
  toolVersion = "2.+"
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max"
  reportLevel = "low"
  excludeFilter = file("$project.projectDir/config/findbugs/excludeFilter.xml")
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    "basic",
    "braces"
  ]
}

checkstyle {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
}

jacoco {
  applyTo(tasks.withType(JavaExec))
}

task jacocoReport(type: JacocoReport) {
  executionData test
  sourceSets project.sourceSets.main
}